# Consumption of api' provider

## Requirements
I would like to create a provider for all the services that consumes the services api's what this means is that we can establish a backend service that exposes only apis. Then a client application can consume the backend services api's. This creates effectively and enterprise system So here is an example of what should be built. So in the caching service, create a provider in the /caching/providers folder called "cachingapi" and add it to the caching entry point in /caching/index.js under the switch(type) = 'api'. In this provider call the serivices api ("{api root}/services/caching/api/") for all the serivce methods. Once this is complete do the same for the aiservice, auth service, dataservice, filing, logging, measuring, nofiying, queueing, searching, workflow, working. Please ensure that the new provider can have an api key set should the backend server require this. 

## Task list

### 1. Create Caching Service API Provider
- [ ] Create `/src/caching/providers/cachingapi.js` provider
- [ ] Implement all caching methods to call `/services/caching/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/caching/index.js` to handle `type: 'api'` case

### 2. Create AI Service API Provider
- [ ] Create `/src/aiservice/providers/aiserviceapi.js` provider
- [ ] Implement all AI service methods to call `/services/aiservice/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/aiservice/index.js` to handle `type: 'api'` case

### 3. Create Auth Service API Provider
- [ ] Create `/src/auth/providers/authapi.js` provider
- [ ] Implement all auth methods to call `/services/auth/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/auth/index.js` to handle `type: 'api'` case

### 4. Create Data Service API Provider
- [ ] Create `/src/dataservice/providers/dataserviceapi.js` provider
- [ ] Implement all data service methods to call `/services/dataservice/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/dataservice/index.js` to handle `type: 'api'` case

### 5. Create Filing Service API Provider
- [ ] Create `/src/filing/providers/filingapi.js` provider
- [ ] Implement all filing methods to call `/services/filing/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/filing/index.js` to handle `type: 'api'` case

### 6. Create Logging Service API Provider
- [ ] Create `/src/logging/providers/loggingapi.js` provider
- [ ] Implement all logging methods to call `/services/logging/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/logging/index.js` to handle `type: 'api'` case

### 7. Create Measuring Service API Provider
- [ ] Create `/src/measuring/providers/measuringapi.js` provider
- [ ] Implement all measuring methods to call `/services/measuring/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/measuring/index.js` to handle `type: 'api'` case

### 8. Create Notifying Service API Provider
- [ ] Create `/src/notifying/providers/notifyingapi.js` provider
- [ ] Implement all notifying methods to call `/services/notifying/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/notifying/index.js` to handle `type: 'api'` case

### 9. Create Queueing Service API Provider
- [ ] Create `/src/queueing/providers/queueingapi.js` provider
- [ ] Implement all queueing methods to call `/services/queueing/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/queueing/index.js` to handle `type: 'api'` case

### 10. Create Searching Service API Provider
- [ ] Create `/src/searching/providers/searchingapi.js` provider
- [ ] Implement all searching methods to call `/services/searching/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/searching/index.js` to handle `type: 'api'` case

### 11. Create Workflow Service API Provider
- [ ] Create `/src/workflow/providers/workflowapi.js` provider
- [ ] Implement all workflow methods to call `/services/workflow/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/workflow/index.js` to handle `type: 'api'` case

### 12. Create Working Service API Provider
- [ ] Create `/src/working/providers/workingapi.js` provider
- [ ] Implement all working methods to call `/services/working/api/` endpoints
- [ ] Add API key configuration support
- [ ] Update `/src/working/index.js` to handle `type: 'api'` case

### 13. Testing & Documentation
- [ ] Test each API provider with backend service
- [ ] Document API key configuration
- [ ] Create example enterprise system setup guide